import { LineEdit, ListView, VerticalBox, HorizontalBox, Button, Spinner, ScrollView, AboutSlint } from "std-widgets.slint";

// ====== MODELOS ======
export struct PokemonRow { name: string }
export struct TypeTag { label: string, bg: brush, icon:  image}
export struct StatBar { name: string, value: int, bg: brush }
export struct PokemonDetail {
    name: string,
    id: int,
    height: int,
    weight: int,
    types: [TypeTag],
    stats: [StatBar],
    artwork: image,
    total: int,
    ability1: string,
    ability2: string,
    hiddenAbility: string,
    error: string,
}

// ====== Componene lista de pokémon ======
component PokemonList inherits Rectangle {
    in property <[PokemonRow]> rows;
    in-out property <int> selected-index: -1;
    property <length> item-height: 40px;
    in property <bool> compact;
    in property <bool> carregando;

    callback selected(index: int);
    callback request-focus();
    request-focus() => { list-scope.focus(); }

    background: transparent;
    border-radius: 6px;

    list-scope := FocusScope {
        width: parent.width;
        height: parent.height;

        // lista visual
        list := ScrollView  {
            width: parent.width;
            height: parent.height;
            mouse-drag-pan-enabled: true;
            VerticalBox {
                width: parent.width;
                spacing: 0px;
                for row[i] in rows: Rectangle {
                    height: item-height;
                    border-radius: 6px;
                    background: (i == selected_index)
                        ? #60a5fa
                        : ((Math.mod(i, 2) == 0) ? #10141c : #0b0f17);

                    Text {
                            text: row.name;
                            color: (i == selected_index) ? #202020 : #e5e7eb;
                            horizontal-stretch: 1;
                        }

                    TouchArea {
                        clicked => {
                            if(!carregando){
                                list-scope.focus();
                                selected_index = i;
                                root.selected(i);
                            }
                        }
                    }
                }
            }
        }

        // navegação por teclado + rolagem automática
        key-pressed(event) => {
            if(!compact && !carregando){
                if (event.text == Key.UpArrow) {
                    if (rows.length > 0) {
                        selected_index = Math.max(0, selected_index - 1);
                        root.selected(selected_index);
                        list.viewport-y = (((selected_index + 1) * item-height) - (list.height / 2)) * (-1);
                    }
                    accept
                }
                if (event.text == Key.DownArrow) {
                    if (rows.length > 0) {
                        if (selected_index < 0) { selected_index = 0; }
                        else { selected_index = Math.min(rows.length - 1, selected_index + 1); }
                        root.selected(selected_index);
                        list.viewport-y = (((selected_index + 1) * item-height) - (list.height / 2)) * (-1);
                    }
                    accept
                }
                if (event.text == Key.Home) {
                    if (rows.length > 0) {
                        selected_index = 0;
                        root.selected(selected_index);
                        list.viewport-y = (((selected_index + 1) * item-height) - (list.height / 2)) * (-1);
                    }
                    accept
                }
                if (event.text == Key.End) {
                    if (rows.length > 0) {
                        selected_index = rows.length - 1;
                        root.selected(selected_index);
                        list.viewport-y = (((selected_index + 1) * item-height) - (list.height / 2)) * (-1);
                    }
                    accept
                }
                reject
            } else {
                reject
            }
        }
    }
}

// ====== PAINEL DE DETALHES ======
component DetailPanel inherits Rectangle {
    in property <PokemonDetail> detail;

    background: transparent;

    ScrollView {
        width: parent.width;
        height: parent.height;
        viewport-width: parent.width;
        mouse-drag-pan-enabled: true;

        VerticalBox {
            width: parent.width;
            spacing: 10px;

            Rectangle { height: 1px; background: #1f2937; }

            // sprite centralizada
            Rectangle {
                width: parent.width;
                height: 260px;
                Rectangle {
                    width: 250px; height: 250px;
                    x: (parent.width - self.width) / 2;
                    y: (parent.height - self.height) / 2;
                    border-radius: 10px; background: transparent;
                    Image { source: root.detail.artwork; width: parent.width; height: parent.height; }
                }
            }

            // chips de tipos + nome + infos
            VerticalBox {
                spacing: 6px;

                // chips (centralizados)
                HorizontalBox {
                    width: parent.width;
                    Rectangle { horizontal-stretch: 1; }

                    HorizontalBox {
                        spacing: 6px;

                        for t in root.detail.types: Rectangle {
                            height: 20px;
                            border-radius: 8px;
                            background: t.bg;

                            HorizontalLayout {
                                padding-left: 8px;
                                padding-right: 8px;
                                Image {
                                    source: t.icon;
                                    y:parent.y + ((parent.height - self.height) / 2);
                                    width: 18px;
                                    height: 18px;
                                }
                                Text {
                                    text: t.label;
                                    color: #ffffff;
                                    font-size: 14px;
                                    vertical-alignment: center;
                                    font-weight: 700;
                                }
                            }
                        }
                    }

                    Rectangle { horizontal-stretch: 1; }
                }

                Text {
                    text: root.detail.name == "" ? "Selecione um Pokémon" : root.detail.name;
                    font-size: 24px; color: #f9fafb;
                    font-weight: 700;
                    width: parent.width; horizontal-alignment: left;
                }

                // infos básicas
                HorizontalBox { spacing: 16px;
                    Text { text: "ID: " + (root.detail.id == 0 ? "-" : root.detail.id); color: #e5e7eb; }
                    Text { text: "Altura: " + (root.detail.height == 0 ? "-" : (root.detail.height / 10.0) + " m"); color: #e5e7eb; }
                    Text { text: "Peso: " + (root.detail.weight == 0 ? "-" : (root.detail.weight / 10.0) + " kg"); color: #e5e7eb; }
                }

                HorizontalBox { spacing: 8px;
                    Text { text: "Habilidade: " + (root.detail.ability1 == "" ? "-" : root.detail.ability1); color: #e5e7eb; }
                    Text { text: "Habilidade 2: " + (root.detail.ability2 == "" ? "-" : root.detail.ability2); color: #e5e7eb; }
                }
                HorizontalBox { spacing: 8px;
                    Text { text: "Hidden: " + (root.detail.hiddenAbility == "" ? "-" : root.detail.hiddenAbility); color: #e5e7eb; }
                }
            }

            if (root.detail.error != "") : Text { text: root.detail.error; color: #ef4444; }

            // barras
            VerticalBox {
                spacing: 6px;

                for s in root.detail.stats: HorizontalBox {
                    spacing: 8px;
                    Text { text: s.name; width: 120px; color: #9ca3af; }
                    Rectangle { // trilho
                        height: 12px; border-radius: 6px; background: #1f2937; horizontal-stretch: 1;
                        Rectangle { // preenchimento
                            height: 12px; border-radius: 6px; x: 0px;
                            // limita entre 0 e 1
                            width: parent.width * min((s.value / 255.0), 1.0);
                            background: s.bg;
                        }
                    }
                    Text { text: s.value; width: 44px; color: #e5e7eb; }
                }

                // total
                HorizontalBox { spacing: 8px;
                    Text { text: "Total"; width: 120px; color: #d1d5db; }
                    Rectangle {
                        height: 14px; border-radius: 7px; background: #1f2937; horizontal-stretch: 1;
                        Rectangle {
                            height: 14px; border-radius: 7px; x: 0px;
                            width: parent.width * min((root.detail.total / 1200.0), 1.0);
                            background: #ffffff;
                        }
                    }
                    Text { text: root.detail.total; width: 44px; color: #fef3c7; }
                }
            }

            Rectangle { height: 12px; background: transparent; }
        }
    }
}

component Splash inherits Rectangle {
    height: 100%;
    width: 100%;
    background: #0B0F17;
    HorizontalLayout {
        height: 100%;
        width: 100%;
        alignment: LayoutAlignment.center;
        VerticalLayout {
            spacing: 10px;
            alignment: LayoutAlignment.center;
            height: 50%;
            width: 50%;

            Text { 
                text: "Slindex";
                font-size: 24px;
                horizontal-alignment: TextHorizontalAlignment.center;
            }
            Image {
                source: @image-url("app.png");
                width: 50%;
                height: 50%;
            }
            Text { 
                text: "Dados fornecidos por PokéAPI";
                font-size: 15px;
                horizontal-alignment: TextHorizontalAlignment.center;
            }

            AboutSlint {
                height: 20%;
                width: 20%;
            }
        }
    }
}

// ====== APP RESPONSIVO ======
export component App inherits Window {
    title: "SlinDex";
    // tamanhos mínimos pra mobile
    min-width: 320px; min-height: 480px;
    icon: @image-url("app.png");

    preferred-width: 900px;
    preferred-height: 700px;

    in-out property <string> filter;
    in-out property <int> selected_index; // mantém seleção na lista
    in-out property <bool> visualiza_pokemon: false;
    in-out property <bool> carregando: false;
    in property <[PokemonRow]> rows;
    in property <PokemonDetail> detail;

    in-out property <bool> splash: true;

    callback request-load();
    callback select(index: int);
    callback apply-filter(text: string);

    callback back-to-list();
    back-to-list() => {
        if(!carregando){
            root.visualiza_pokemon = false;
        }
    }

    // breakpoint simples
    property <bool> compact: self.width < 720px;

    if(splash):Splash{

    }

    if(!splash):VerticalBox {
        spacing: 12px; padding: 12px;

        // --- top bar ---
        Rectangle {
            // altura fixa evita que o layout-info da barra dependa dos filhos
            height: 60px;
            horizontal-stretch: 1;

            // Versão normal (busca + botões)
            if (!(root.compact && root.visualiza_pokemon)) : HorizontalBox {
                x: 0px; y: 0px; width: parent.width; height: parent.height;
                spacing: 8px;

                LineEdit {
                    placeholder-text: "Buscar Pokémon";
                    text <=> root.filter;
                    horizontal-stretch: 1;
                    accepted(text) => { root.apply-filter(text); }
                }
                Button { text: "Filtrar";          clicked => { root.apply-filter(root.filter); } }
                Button { text: "Recarregar lista"; clicked => { root.request-load(); } }
            }

            // Versão compacta com "Voltar"
            if (root.compact && root.visualiza_pokemon) : HorizontalBox {
                x: 0px; y: 0px; width: parent.width; height: parent.height;
                spacing: 8px;
                Button {
                    text: "← Voltar";
                    clicked => { root.back-to-list(); }
                }
            }
        }

        // --- conteúdo ---
        Rectangle {
            horizontal-stretch: 1;
            vertical-stretch: 1;

            // LISTA
            list_pane := PokemonList {
                // geometria muda com o breakpoint
                x: 0px;
                y: 0px;
                width: root.compact ? parent.width : 220px;
                height: parent.height;

                rows: root.rows;
                selected-index <=> root.selected_index;
                compact: compact;

                carregando: carregando;

                // no compacto, ao selecionar já navega para o detalhe
                selected(i) => {
                    root.select(i);
                    if (root.compact) { root.visualiza_pokemon = true; }
                }

                // visibilidade: no compacto alterna com o detalhe; no amplo fica sempre visível
                visible: root.compact ? !root.visualiza_pokemon : true;
            }

            // DETALHE
            detail_pane := DetailPanel {
                y: 0px;
                x: root.compact ? 0px : (list_pane.width + 12px);
                width: root.compact ? parent.width : (parent.width - (list_pane.width + 12px));
                height: parent.height;

                detail: root.detail;

                // visibilidade: no compacto alterna com a lista; no amplo fica sempre visível
                visible: root.compact ? root.visualiza_pokemon : true;
            }
        }
    }
}