import { LineEdit, ListView, VerticalBox, HorizontalBox, Button, Spinner, ScrollView } from "std-widgets.slint";

// ====== MODELOS ======
export struct PokemonRow { name: string }
export struct TypeTag { label: string, bg: brush }
export struct StatBar { name: string, value: int, bg: brush }
export struct PokemonDetail {
    name: string,
    id: int,
    height: int,
    weight: int,
    types: [TypeTag],
    stats: [StatBar],
    artwork: image,
    total: int,
    ability1: string,
    ability2: string,
    hiddenAbility: string,
    error: string,
}

component OutlinedText inherits Rectangle {
    in property <string> value;
    in property <brush>  fill: #ffffff;
    in property <brush>  outline: #000000;
    in property <length> w: 1px;
    in property <length> font-size: 18px;
    in property <int>    font-weight: 700;

    // mede o texto para preferred-*
    base := Text {
        text: root.value;
        font-size: root.font-size;
        font-weight: root.font-weight;
        visible: false;
    }

    preferred-width:  base.preferred-width  + 2*root.w;
    preferred-height: base.preferred-height + 2*root.w;
    width: base.preferred-width;     // trava ao tamanho preferido
    height: base.preferred-height;

    // 8 “sombras” (contorno) em volta do ponto (w, w)
    Text { x: root.w - root.w; y: root.w;           text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w + root.w; y: root.w;           text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w;           y: root.w - root.w; text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w;           y: root.w + root.w; text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w - root.w; y: root.w - root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w + root.w; y: root.w - root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w - root.w; y: root.w + root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w + root.w; y: root.w + root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }

    // texto “limpo” ancorado em (w, w) — sem centralizar
    Text {
        x: root.w; y: root.w;
        text: root.value;
        font-size: root.font-size;
        font-weight: root.font-weight;
        color: root.fill;
    }
}

// ====== LISTA COM TECLADO + SCROLL AUTO ======
component PokemonList inherits Rectangle {
    in property <[PokemonRow]> rows;
    in-out property <int> selected-index: -1;
    in-out property <length> item-height: 36px;
    in-out property <int> center-count: 7; // qtd de itens "antes" e "depois" para centralizar

    callback selected(index: int);

    background: transparent;
    border-radius: 6px;

    fs := FocusScope {
        // navegação por teclado + rolagem automática
        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                if (rows.length > 0) {
                    selected_index = Math.max(0, selected_index - 1);
                    root.selected(selected_index);
                    list.viewport-y = (selected_index - center_count) * item_height * (-1);
                }
                accept
            }
            if (event.text == Key.DownArrow) {
                if (rows.length > 0) {
                    if (selected_index < 0) { selected_index = 0; }
                    else { selected_index = Math.min(rows.length - 1, selected_index + 1); }
                    root.selected(selected_index);
                    list.viewport-y = (selected_index - center_count) * item_height * (-1);
                }
                accept
            }
            if (event.text == Key.Home) {
                if (rows.length > 0) {
                    selected_index = 0;
                    root.selected(selected_index);
                    list.viewport-y = (selected_index - center_count) * item_height * (-1);
                }
                accept
            }
            if (event.text == Key.End) {
                if (rows.length > 0) {
                    selected_index = rows.length - 1;
                    root.selected(selected_index);
                    list.viewport-y = (selected_index - center_count) * item_height * (-1);
                }
                accept
            }
            reject
        }
    }

    list-scope := FocusScope {
        width: parent.width;
        height: parent.height;

        // lista visual
        // dentro do seu componente PokemonList
        list := ListView {
            width: parent.width;
            height: parent.height;
            mouse-drag-pan-enabled: true;

            for row[i] in rows: Rectangle {
                height: item_height;
                border-radius: 6px;
                background: (i == selected_index)
                    ? #1e293b
                    : ((Math.mod(i, 2) == 0) ? #10141c : #0b0f17);

                // borda de seleção
                Rectangle {
                    width: parent.width; height: parent.height;
                    border-radius: 6px;
                    border-width: (i == selected_index) ? 1px : 0px;
                    border-color: #60a5fa;
                    background: transparent;
                }

                // Linha com padding e alinhamento vertical central
                HorizontalBox {
                    width: parent.width;
                    height: parent.height;
                    spacing: 0px;
                    alignment: center;    // centraliza VERTICALMENTE os filhos

                    // "padding" à esquerda de 8px
                    Rectangle { width: 8px; height: 1px; }

                    Text {
                        text: row.name;
                        color: (i == selected_index) ? #e2e8f0 : #e5e7eb;
                        horizontal-stretch: 1;
                    }
                }

                TouchArea {
                    clicked => {
                        fs.focus();
                        selected_index = i;
                        root.selected(i);
                    }
                }
            }
        }
    }
}

// ====== PAINEL DE DETALHES ======
component DetailPanel inherits Rectangle {
    in property <PokemonDetail> detail;

    background: transparent;

    ScrollView {
        width: parent.width;
        height: parent.height;
        viewport-width: parent.width;
        mouse-drag-pan-enabled: true;

        VerticalBox {
            width: parent.width;
            spacing: 10px;

            Rectangle { height: 1px; background: #1f2937; }

            // sprite centralizada
            Rectangle {
                width: parent.width;
                height: 260px;
                Rectangle {
                    width: 250px; height: 250px;
                    x: (parent.width - self.width) / 2;
                    y: (parent.height - self.height) / 2;
                    border-radius: 10px; background: transparent;
                    Image { source: root.detail.artwork; width: parent.width; height: parent.height; }
                }
            }

            // chips de tipos + nome + infos
            VerticalBox {
                spacing: 6px;

                // chips (centralizados)
                HorizontalBox {
                    width: parent.width;
                    Rectangle { horizontal-stretch: 1; }
                    HorizontalBox {
                        spacing: 6px;
                        for t in root.detail.types: Rectangle {
                            border-radius: 8px;
                            background: t.bg;
                            height: 32px;

                            // label com contorno
                            label := OutlinedText {
                                value: t.label;
                                fill: #ffffff;
                                outline: #000000;
                                w: 1px;                // se quiser mais forte: 1.5px
                                font-size: 18px;
                                font-weight: 700;

                                // padding à esquerda + centralização vertical
                                x: 8px;
                                y: (parent.height - self.preferred-height) / 2;
                            }

                            // largura do chip = texto + padding (8px de cada lado)
                            width: label.preferred-width + 16px;
                        }
                    }
                    Rectangle { horizontal-stretch: 1; }
                }

                Text {
                    text: root.detail.name == "" ? "Selecione um Pokémon" : root.detail.name;
                    font-size: 24px; color: #f9fafb;
                    width: parent.width; horizontal-alignment: left;
                }

                // infos básicas
                HorizontalBox { spacing: 16px;
                    Text { text: "ID: " + (root.detail.id == 0 ? "-" : root.detail.id); color: #e5e7eb; }
                    Text { text: "Altura: " + (root.detail.height == 0 ? "-" : (root.detail.height / 10.0) + " m"); color: #e5e7eb; }
                    Text { text: "Peso: " + (root.detail.weight == 0 ? "-" : (root.detail.weight / 10.0) + " kg"); color: #e5e7eb; }
                }

                HorizontalBox { spacing: 8px;
                    Text { text: "Habilidade: " + (root.detail.ability1 == "" ? "-" : root.detail.ability1); color: #e5e7eb; }
                    Text { text: "Habilidade 2: " + (root.detail.ability2 == "" ? "-" : root.detail.ability2); color: #e5e7eb; }
                }
                HorizontalBox { spacing: 8px;
                    Text { text: "Hidden: " + (root.detail.hiddenAbility == "" ? "-" : root.detail.hiddenAbility); color: #e5e7eb; }
                }
            }

            if (root.detail.error != "") : Text { text: root.detail.error; color: #ef4444; }

            // barras
            VerticalBox {
                spacing: 6px;

                for s in root.detail.stats: HorizontalBox {
                    spacing: 8px;
                    Text { text: s.name; width: 120px; color: #9ca3af; }
                    Rectangle { // trilho
                        height: 12px; border-radius: 6px; background: #1f2937; horizontal-stretch: 1;
                        Rectangle { // preenchimento
                            height: 12px; border-radius: 6px; x: 0px;
                            // limita entre 0 e 1
                            width: parent.width * min((s.value / 255.0), 1.0);
                            background: s.bg;
                        }
                    }
                    Text { text: s.value; width: 44px; color: #e5e7eb; }
                }

                // total
                HorizontalBox { spacing: 8px;
                    Text { text: "Total"; width: 120px; color: #d1d5db; }
                    Rectangle {
                        height: 14px; border-radius: 7px; background: #1f2937; horizontal-stretch: 1;
                        Rectangle {
                            height: 14px; border-radius: 7px; x: 0px;
                            width: parent.width * min((root.detail.total / 1200.0), 1.0);
                            background: #ffffff;
                        }
                    }
                    Text { text: root.detail.total; width: 44px; color: #fef3c7; }
                }
            }

            Rectangle { height: 12px; background: transparent; }
        }
    }
}

// ====== APP RESPONSIVO ======
export component App inherits Window {
    title: "SlinDex";
    // tamanhos mínimos pra mobile
    min-width: 320px; min-height: 480px;
    icon: @image-url("app.png");

    preferred-width: 900px;
    preferred-height: 700px;

    in-out property <string> filter;
    in-out property <int> selected_index; // mantém seleção na lista
    in-out property <length> altura_item_lista: 36px;
    in-out property <int> qtd_centro_item_lista: 7;
    in-out property <bool> visualiza_pokemon: false;
    in property <[PokemonRow]> rows;
    in property <PokemonDetail> detail;

    callback request-load();
    callback select(index: int);
    callback apply-filter(text: string);

    // breakpoint simples
    property <bool> compact: self.width < 720px;

    VerticalBox {
        spacing: 12px; padding: 12px;

        // --- top bar SEM loop de layout ---
        Rectangle {
            // altura fixa evita que o layout-info da barra dependa dos filhos
            height: 44px;
            horizontal-stretch: 1;

            // Versão normal (busca + botões)
            if (!(root.compact && root.visualiza_pokemon)) : HorizontalBox {
                x: 0px; y: 0px; width: parent.width; height: parent.height;
                spacing: 8px;

                LineEdit {
                    placeholder-text: "Buscar Pokémon";
                    text <=> root.filter;
                    horizontal-stretch: 1;
                    accepted(text) => { root.apply-filter(text); }
                }
                Button { text: "Filtrar";          clicked => { root.apply-filter(root.filter); } }
                Button { text: "Recarregar lista"; clicked => { root.request-load(); } }
            }

            // Versão compacta com "Voltar"
            if (root.compact && root.visualiza_pokemon) : HorizontalBox {
                x: 0px; y: 0px; width: parent.width; height: parent.height;
                spacing: 8px;
                Button {
                    text: "Voltar";
                    clicked => { root.visualiza_pokemon = false; }
                }
            }
        }


        // --- conteúdo ocupa o resto, sem amarrar width/height ---
        Rectangle {
            horizontal-stretch: 1;
            vertical-stretch: 1;

            // Compacto (empilhado)
            if (root.compact) : VerticalBox {
                spacing: 12px;
                horizontal-stretch: 1;
                vertical-stretch: 1;

                if(!visualiza_pokemon) : PokemonList {
                    horizontal-stretch: 1; vertical-stretch: 1;
                    rows: root.rows;
                    selected-index <=> root.selected_index;
                    item-height: root.altura_item_lista;
                    center-count: 1;
                    selected(i) => { root.select(i); }
                }

                if(visualiza_pokemon) :DetailPanel {
                    horizontal-stretch: 1; vertical-stretch: 4;
                    detail: root.detail;
                }
            }

            // Amplo (lado a lado)
            if (!root.compact) : HorizontalBox {
                spacing: 12px;
                horizontal-stretch: 1;
                vertical-stretch: 1;

                PokemonList {
                    width: 220px;           // largura fixa da lista
                    vertical-stretch: 1;    // altura toda
                    rows: root.rows;
                    selected-index <=> root.selected_index;
                    item-height: root.altura_item_lista;
                    center-count: root.qtd_centro_item_lista;
                    selected(i) => { root.select(i); }
                }

                DetailPanel {
                    horizontal-stretch: 1;  // ocupa o restante
                    vertical-stretch: 1;
                    detail: root.detail;
                }
            }
        }
    }
}
