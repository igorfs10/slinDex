import { LineEdit, ListView, VerticalBox, HorizontalBox, Button, Spinner } from "std-widgets.slint";

// lista (esquerda): apenas nome
export struct PokemonRow { name: string }

// detalhe (direita): tipos coloridos, barras por stat, sprite e total
export struct TypeTag { label: string, bg: brush}
export struct StatBar { name: string, value: int, bg: brush }

export struct PokemonDetail {
    name: string,
    id: int,
    height: int,
    weight: int,
    types: [TypeTag],
    stats: [StatBar],
    artwork: image,
    total: int,
    ability1: string,
    ability2: string,
    hiddenAbility: string,
    error: string,
}

// Texto com contorno (stroke fake via múltiplas camadas)
component OutlinedText inherits Rectangle {
    // propriedades de entrada
    in property <string> value;
    in property <brush>  fill: #ffffff;      // cor do texto
    in property <brush>  outline: #000000;   // cor do contorno
    in property <length> w: 1px;             // espessura do contorno
    in property <length> font-size: 14px;
    in property <int>    font-weight: 400;

    // mede o texto principal pra dimensionar o componente
    base := Text {
        text: root.value;
        font-size: root.font-size;
        font-weight: root.font-weight;
        color: root.fill;
        visible: false;      // só para medir preferred-*
    }

    preferred-width:  base.preferred-width  + 2*root.w;
    preferred-height: base.preferred-height + 2*root.w;

    // 8 sombras (contorno) atrás
    Text { x: root.w - root.w; y: root.w;           text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w + root.w; y: root.w;           text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w;           y: root.w - root.w; text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w;           y: root.w + root.w; text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w - root.w; y: root.w - root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w + root.w; y: root.w - root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w - root.w; y: root.w + root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }
    Text { x: root.w + root.w; y: root.w + root.w;  text: root.value; font-size: root.font-size; font-weight: root.font-weight; color: root.outline; }

    // texto “limpo” por cima, centralizado
    Text {
        text: root.value;
        font-size: root.font-size;
        font-weight: root.font-weight;
        color: root.fill;

        x: (parent.width  - self.preferred-width)  / 2;
        y: (parent.height - self.preferred-height) / 2;
    }
}



export component App inherits Window {
    width: 650px;
    height: 600px;
    title: "SlinDex";

    in-out property <string> filter;
    in-out property <int> selected_index; // mantém seleção na lista
    in property <[PokemonRow]> rows;
    in property <PokemonDetail> detail;
    in property <bool> loading;

    callback request-load();
    callback select(index: int);
    callback apply-filter(text: string);

    VerticalBox {
        spacing: 12px;
        padding: 12px;

        // Top bar estável
        HorizontalBox {
            spacing: 8px;

            LineEdit {
                placeholder-text: "Buscar Pokémon";
                text <=> root.filter;
                horizontal-stretch: 1;

                // chamado quando pressiona Enter dentro do LineEdit
                accepted(text) => {        // ✅ existe mesmo em versões antigas
                    root.apply-filter(text);
                }
            }

            Button { text: "Filtrar";  clicked => { root.apply-filter(root.filter); } }
            Button { text: "Recarregar lista"; clicked => { root.request-load(); } }

            Rectangle {
                width: 24px; height: 24px;
                Spinner {
                    width: 20px; height: 20px;
                    visible: root.loading;
                    x: (parent.width - self.width) / 2;
                    y: (parent.height - self.height) / 2;
                }
            }
        }

        // ====== CONTAINER DO MIOLO (pega 100% da altura) ======
        Rectangle {
            vertical-stretch: 1;

            // Conteúdo: lista (esq) + detalhes (dir)
            HorizontalBox {
                spacing: 12px;
                y: 0px;
                height: parent.height;   // <- garante altura total

                // Lista de nomes
                ListView {
                    width: 200px;
                    y: 0px;
                    height: parent.height;   // <- altura total

                    for row[i] in root.rows: Rectangle {
                        height: 36px;
                        border-radius: 6px;
                        background: (i == root.selected_index)
                            ? #1e293b
                            : ((Math.mod(i, 2) == 0) ? #10141c : #0b0f17);

                        // borda sutil no selecionado
                        Rectangle {
                            x: 0px; y: 0px; width: parent.width; height: parent.height;
                            border-radius: 6px;
                            border-width: (i == root.selected_index) ? 1px : 0px;
                            border-color: #60a5fa;
                            background: transparent;
                        }

                        Text {
                            text: row.name;
                            color: (i == root.selected_index) ? #e2e8f0 : #e5e7eb;
                            x: 8px;
                            y: (parent.height - self.preferred-height) / 2;
                        }

                        TouchArea {
                            clicked => {
                                root.selected_index = i; // mantém selecionado
                                root.select(i);          // notifica o Rust
                            }
                        }
                    }
                }

                // Painel de detalhes (com rolagem)
                Rectangle {
                    horizontal-stretch: 1;
                    height: parent.height;

                    Flickable {
                        width: parent.width;
                        height: parent.height;

                        // o conteúdo real do painel
                        VerticalBox {
                            width: parent.width;   // ocupa toda a largura do flickable
                            spacing: 10px;

                            Rectangle { height: 1px; background: #1f2937; }

                            // sprite
                            Rectangle {
                                width: parent.width;
                                height: 260px; // respiro vertical; ajuste se quiser

                                // card da sprite centralizado
                                Rectangle {
                                    width: 250px; height: 250px;
                                    x: (parent.width - self.width) / 2;
                                    y: (parent.height - self.height) / 2;
                                    border-radius: 10px; background: transparent;

                                    // preenche o card
                                    Image {
                                        source: detail.artwork;
                                        width: parent.width;
                                        height: parent.height;
                                    }
                                }
                            }

                            VerticalBox {
                                spacing: 6px;
                                HorizontalBox {
                                    Text {
                                        text: detail.name == "" ? "Selecione um Pokémon" : detail.name;
                                        font-size: 24px; color: #f9fafb;
                                    }
                                }
                                
                                // chips de tipos (coloridos) — linha centralizada
                                HorizontalBox {
                                    width: parent.width;

                                    // spacers para centralizar a linha de chips
                                    Rectangle { horizontal-stretch: 1; }

                                    // linha dos chips
                                    HorizontalBox {
                                        spacing: 6px;

                                        // cada chip
                                        for t in detail.types: Rectangle {
                                            border-radius: 8px;
                                            background: t.bg;
                                            height: 24px;

                                            // mede o texto pra dar largura + padding (8px de cada lado)
                                            label := Text { 
                                                text:= OutlinedText {
                                                    value: t.label;
                                                    fill: #ffffff;
                                                    outline: #000000;   // cor do contorno
                                                    w: 1px;             // espessura (pode por 1.5px/2px)
                                                    font-size: 14px;

                                                    // centraliza dentro do chip
                                                    width: parent.width;
                                                    height: parent.height;
                                                }
                                                x: (parent.width - self.preferred-width) / 2;
                                                y: (parent.height - self.preferred-height) / 2;
                                            }
                                            width: label.preferred-width + 16px;
                                        }
                                    }

                                    Rectangle { horizontal-stretch: 1; }
                                }

                                // infos básicas
                                HorizontalBox {
                                    spacing: 16px;
                                    Text { text: "ID: " + (detail.id == 0 ? "-" : detail.id); color: #e5e7eb; }
                                    Text { text: "Altura: " + (detail.height == 0 ? "-" : (detail.height / 10.0) + " m"); color: #e5e7eb; }
                                    Text { text: "Peso: " + (detail.weight == 0 ? "-" : (detail.weight / 10.0) + " kg"); color: #e5e7eb; }
                                }

                                HorizontalBox {
                                    spacing: 8px;
                                    Text { text: "Habilidade: " + (detail.ability1 == "" ? "-" : detail.ability1); color: #e5e7eb; }
                                    Text { text: "Habilidade 2: " + (detail.ability2 == "" ? "-" : detail.ability2); color: #e5e7eb; }
                                }
                                HorizontalBox {
                                    spacing: 8px;
                                    Text { text: "Hidden: " + (detail.hiddenAbility == "" ? "-" : detail.hiddenAbility); color: #e5e7eb; }
                                }
                            }

                            if (detail.error != "") : Text { text: detail.error; color: #ef4444; }

                            // Habilidades + barras
                            VerticalBox {
                                spacing: 6px;

                                for s in detail.stats: HorizontalBox {
                                    spacing: 8px;

                                    Text { text: s.name; width: 120px; color: #9ca3af; }

                                    Rectangle { // trilho
                                        height: 12px; border-radius: 6px; background: #1f2937; horizontal-stretch: 1;

                                        Rectangle { // preenchimento
                                            height: 12px; border-radius: 6px;
                                            x: 0px;
                                            width: parent.width * Math.min((s.value / 255.0), 1.0);
                                            background: s.bg;
                                        }
                                    }

                                    Text { text: s.value; width: 44px; color: #e5e7eb; }
                                }

                                // Barra TOTAL
                                HorizontalBox {
                                    spacing: 8px;
                                    Text { text: "Total"; width: 120px; color: #d1d5db; }
                                    Rectangle {
                                        height: 14px; border-radius: 7px; background: #1f2937; horizontal-stretch: 1;
                                        Rectangle {
                                            height: 14px; border-radius: 7px;
                                            x: 0px;
                                            width: parent.width * Math.min((detail.total / 1200.0), 1.0);
                                            background: #ffffff;
                                        }
                                    }
                                    Text { text: detail.total; width: 44px; color: #fef3c7; }
                                }
                            }

                            // um espacinho no fim ajuda o scroll a "respirar"
                            Rectangle { height: 12px; background: transparent; }
                        }
                    }
                }

            }
        }
    }
}
