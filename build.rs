fn main() {
    // Descobre o SO de destino (não o do host!)
    let target_os = std::env::var("CARGO_CFG_TARGET_OS").unwrap_or_default();

    // Só embute ícone quando o TARGET for Windows (.exe)
    if target_os == "windows" {
        let mut res = winres::WindowsResource::new();
        res.set_icon("app.ico"); // ajuste o caminho do seu .ico
        // Não derruba builds de outras plataformas caso falhe por algum motivo
        if let Err(e) = res.compile() {
            eprintln!("winres falhou: {e}");
        }
    }

    let cfg = slint_build::CompilerConfiguration::new().with_style("cosmic-dark".into());
    slint_build::compile_with_config("ui/app.slint", cfg).expect("Failed to compile Slint UI");

    let csv_path = "data/pokemon.csv"; // ajuste se necessário
    let csv = std::fs::read_to_string(csv_path).expect("failed to read CSV");

    let mut out = String::new();
    out.push_str("// Auto-generated by build.rs\n");
    out.push_str("pub const POKEMON_LIST: &[(u32, &str)] = &[\n");

    for line in csv.lines() {
        let mut cols = line.split(',');
        let id = cols.next().unwrap().trim();
        let identifier = cols.next().unwrap().trim();
        out.push_str(&format!("    ({}, \"{}\"),\n", id, identifier));
    }

    out.push_str("];\n");

    // gera em OUT_DIR
    let out_dir = std::env::var("OUT_DIR").unwrap();
    std::fs::write(std::path::Path::new(&out_dir).join("pokemon_list.rs"), out).unwrap();
}
